plot( Speed, Time_to_dest, xlab = 'Speed (km/h)',
ylab = 'Time to destination (h)', bty = 'l', type = 'l' )
f = function( a, b ) {
sel = Speed >= a & Speed <= b
x = Speed[sel]; y = Time_to_dest[sel]
h1 = y[1]; h2 = y[ length(y) ]
points( c(a,b), c(h1,h2), pch = 19 )
segments( c( a, a ), c( h1, h2 ), c( a, b ), c( h2, h2 ) )
}
f(50,60)
f(60,70)
Speed = seq( 40, 80, length = 100 )
Dist = 100
Time_to_dest = Dist / Speed
plot( Speed, Time_to_dest, xlab = 'Speed (km/h)',
ylab = 'Time to destination (h)', bty = 'l', type = 'l' )
f = function( a, b ) {
sel = Speed >= a & Speed <= b
x = Speed[sel]; y = Time_to_dest[sel]
h1 = y[1]; h2 = y[ length(y) ]
points( c(a,b), c(h1,h2), pch = 19 )
segments( c( a, a ), c( h1, h2 ), c( a, b ), c( h2, h2 ) )
}
f(60,70)
f(50,60)
40/3
42/3
rep( c(-1,0,1), 14 )
rep( c(-1,1), each = 3 )
42/6
rep( rep( c(-1,1), each = 3 ), 7 )
cbind( A = rep( c(-1,1), each = 21 ),
B = rep( rep( c(-1,1), each = 3 ), 7 ),
C = rep( c(-1,0,1), 14 ) )
S = 30 # Number of subjects
N = 42 # Number of trials per subject
# Define design matrix with an intercept term and
# three contrast coded factors
X = cbind( 1, A = rep( c(-1,1), each = N/2 ),
B = rep( rep( c(-1,1), each = 3 ), N/6 ),
C = rep( c(-1,0,1), N/3 ) )
X = matrix( X, N*S, ncol(X) )
mvnorm
mvrnorm
library(mvtnorm)
mvrnorm
rmvnorm
I = diag( ncol(X) )
I
# Load in library for multivariate normal
library(mvtnorm)
# Create a simulation example with known generating parameters
S = 30 # Number of subjects
N = 42 # Number of trials per subject
# Define design matrix with an intercept term and
# three contrast coded factors
X = cbind( 1, A = rep( c(-1,1), each = N/2 ),
B = rep( rep( c(-1,1), each = 3 ), N/6 ),
C = rep( c(-1,0,1), N/3 ) )
X = matrix( X, N*S, ncol(X) )
# Create an identity matrix
I = diag( ncol(X) )
# Define the regression coefficients
B = rbind( 100, 5, -4, 2 )
# Define a scale parameter
sigma = 15
set.seed( 4820 ) # For replicability
# Formula for linear regression
# Y = N( X*B + o, sigma*W_inv )
Y = mvrnorm( X %*% B, sigma^2 * I )
mvrnorm
library(mvtnorm)
mvrnorm
rmvnorm
# Load in library for multivariate normal
library(mvtnorm)
# Create a simulation example with known generating parameters
S = 30 # Number of subjects
N = 42 # Number of trials per subject
# Define design matrix with an intercept term and
# three contrast coded factors
X = cbind( 1, A = rep( c(-1,1), each = N/2 ),
B = rep( rep( c(-1,1), each = 3 ), N/6 ),
C = rep( c(-1,0,1), N/3 ) )
X = matrix( X, N*S, ncol(X) )
# Create an identity matrix
I = diag( ncol(X) )
# Define the regression coefficients
B = rbind( 100, 5, -4, 2 )
# Define a scale parameter
sigma = 15
set.seed( 4820 ) # For replicability
# Formula for linear regression
# Y = N( X*B + o, sigma*W_inv )
Y = rmvnorm( X %*% B, sigma^2 * I )
nrow( X )
B
X %*% B
# Load in library for multivariate normal
library(mvtnorm)
# Create a simulation example with known generating parameters
S = 30 # Number of subjects
N = 42 # Number of trials per subject
# Define design matrix with an intercept term and
# three contrast coded factors
X = cbind( 1, A = rep( c(-1,1), each = N/2 ),
B = rep( rep( c(-1,1), each = 3 ), N/6 ),
C = rep( c(-1,0,1), N/3 ) )
X = matrix( X, N*S, ncol(X) )
# Create an identity matrix
I = diag( ncol(X) )
# Define the regression coefficients
B = rbind( 100, 5, -4, 2 )
# Define a scale parameter
sigma = 15
set.seed( 4820 ) # For replicability
# Formula for linear regression
# Y = N( X*B + o, sigma*W_inv )
Y = rnorm( X %*% B, sigma^2 )
Y
x11(); hist( y )
x11(); hist( Y )
15*3
# Load in library for multivariate normal
library(mvtnorm)
# Create a simulation example with known generating parameters
S = 30 # Number of subjects
N = 42 # Number of trials per subject
# Define design matrix with an intercept term and
# three contrast coded factors
X = cbind( 1, A = rep( c(-1,1), each = N/2 ),
B = rep( rep( c(-1,1), each = 3 ), N/6 ),
C = rep( c(-1,0,1), N/3 ) )
X = matrix( X, N*S, ncol(X) )
# Create an identity matrix
I = diag( ncol(X) )
# Define the regression coefficients
B = rbind( 55, 5, -4, 2 )
# Define a scale parameter
sigma = 15
set.seed( 4820 ) # For replicability
# Formula for linear regression
# Y = N( X*B + o, sigma*W_inv )
Y = rnorm( X %*% B, sigma^2 )
x11(); hist( Y )
x11(); hist( Y )
lm( Y ~ X[,1] + X[,2] + X[,3] )
lm( Y ~ X[,2] + X[,3] + X[,4] )
X %*% B
head( X )
B
B = rbind( 100, 5, -4, 2 )
dim( X )
X %*% B
X[900:1000,]
# Load in library for multivariate normal
library(mvtnorm)
# Create a simulation example with known generating parameters
S = 30 # Number of subjects
N = 42 # Number of trials per subject
# Define design matrix with an intercept term and
# three contrast coded factors
X = cbind( I = 1, A = rep( c(-1,1), each = N/2 ),
B = rep( rep( c(-1,1), each = 3 ), N/6 ),
C = rep( c(-1,0,1), N/3 ) )
X = matrix( X, N*S, ncol(X), byrow = T )
# Create an identity matrix
I = diag( ncol(X) )
# Define the regression coefficients
B = rbind( 100, 5, -4, 2 )
# Define a scale parameter
sigma = 15
set.seed( 4820 ) # For replicability
# Formula for linear regression
# Y = N( X*B + o, sigma*W_inv )
Y = rnorm( X %*% B, sigma^2 )
x11(); hist( Y )
X %*% B
X[1:100,]
# Load in library for multivariate normal
library(mvtnorm)
# Create a simulation example with known generating parameters
S = 30 # Number of subjects
N = 42 # Number of trials per subject
# Define design matrix with an intercept term and
# three contrast coded factors
tmp = cbind( I = 1, A = rep( c(-1,1), each = N/2 ),
B = rep( rep( c(-1,1), each = 3 ), N/6 ),
C = rep( c(-1,0,1), N/3 ) )
X = c(); for (s in 1:S) X = rbind( X, tmp )
# Create an identity matrix
I = diag( ncol(X) )
# Define the regression coefficients
B = rbind( 100, 5, -4, 2 )
# Define a scale parameter
sigma = 15
set.seed( 4820 ) # For replicability
# Formula for linear regression
# Y = N( X*B + o, sigma*W_inv )
Y = rnorm( X %*% B, sigma^2 )
x11(); hist( Y )
X
X %*% B
source('~/.active-rstudio-document', echo=TRUE)
Y
X %*% B
source('~/.active-rstudio-document', echo=TRUE)
S = 30 # Number of subjects
N = 20 # Number of trials per subject
# Define design matrix with an intercept term and
# three contrast coded factors
tmp = cbind( I = 1, # Intercept
A = rep( c(-1,1), each = N/2 ), # Factor A
B = rep( rep( c(-1,1), each = 2 ), N/4 ) )
tmp
A = rep( c( -1, 1 ), each = N/2 )
B = rep( c( -1, 1 ), N/2 )
S = 30 # Number of subjects
N = 10 # Number of trials per subject
# Define design matrix with an intercept term and
# three contrast coded factors
A = rep( c( -1, 1 ), each = N/2 )
B = rep( c( -1, 1 ), N/2 )
A
B
cbind( A, B )
S = 30 # Number of subjects
N = 12 # Number of trials per subject
# Define design matrix with an intercept term and
# three contrast coded factors
A = rep( c( -1, 1 ), each = N/2 )
B = rep( c( -1, 1 ), N/2 )
cbind( A, B )
A * B
yp1 = c( B[1], B[1] + B[2], B[1] + B[3] )
ym1 = c( B[1], B[1] - B[2], B[1] - B[3] )
x11();
yp1 = c( B[1], B[1] + B[2], B[1] + B[3] )
ym1 = c( B[1], B[1] - B[2], B[1] - B[3] )
plot( 1:3, yp1, type = 'l', ylim = c( 80, 120 ), bty = 'l' )
yp1
B
Beta = rbind( 100, 10, 5 )
yp1 = c( Beta[1], Beta[1] + Beta[2], Beta[1] + Beta[3] )
ym1 = c( Beta[1], Beta[1] - Beta[2], Beta[1] - Beta[3] )
plot( 1:3, yp1, type = 'b', ylim = c( 80, 120 ), bty = 'l' )
plot( 1:3, yp1, type = 's', ylim = c( 80, 120 ), bty = 'l' )
lines( 1:3, ym1, type = 's', lty = 2 )
Xsmall = cbind( 1, c( -1, -1, 1, 1 ), c(-1, 1, -1, 1 ) )
Xsmall = cbind( 1, c( -1, -1, 1, 1 ), c(-1, 1, -1, 1 ) )
Xsmall = cbind( Xsmall, Xsmall[,2] * Xsmall[,3] )
Xsmall
Xsmall %8% B
Xsmall %*% B
Xsmall
Xsmall %*% Beta
Beta
Beta = rbind( 100, 10, 5, -5 )
Xsmall = cbind( 1, c( -1, -1, 1, 1 ), c(-1, 1, -1, 1 ) )
Xsmall = cbind( Xsmall, Xsmall[,2] * Xsmall[,3] )
Xsmall %*% Beta
plot( c(0,1), c( 70, 130 ), type = 'n' )
segments( c(0,0), ef[1:2], c(1,1), ef[3:4] )
ef = Xsmall %*% Beta
segments( c(0,0), ef[1:2], c(1,1), ef[3:4] )
Beta = rbind( 100, 10, 5, 5 )
Xsmall = cbind( 1, c( -1, -1, 1, 1 ), c(-1, 1, -1, 1 ) )
Xsmall = cbind( Xsmall, Xsmall[,2] * Xsmall[,3] )
ef = Xsmall %*% Beta
plot( c(0,1), c( 70, 130 ), type = 'n' )
segments( c(0,0), ef[1:2], c(1,1), ef[3:4] )
layout( cbind( 1, 2 ) )
plot( c(0,1), c( 70, 130 ), type = 'n', xlab = 'Levels of factor A',
xaxt = 'n', ylab = 'DV' )
segments( c(0,0), ve$V[ ve$B == -1 ],
c(1,1), ve$V[ ve$B == 1 ], lty = c(1,2) )
plot( c(0,1), c( 70, 130 ), type = 'n', xlab = 'Levels of factor B',
xaxt = 'n', ylab = 'DV' )
segments( c(0,0), ve$V[ ve$A == -1 ],
c(1,1), ve$V[ ve$A == 1 ], lty = c(1,2) )
# Define the regression coefficients
Beta = rbind( 100, 10, 5, 5 )
# Visual example of the effects
Xsmall = cbind( 1, c( -1, -1, 1, 1 ), c(-1, 1, -1, 1 ) )
Xsmall = cbind( Xsmall, Xsmall[,2] * Xsmall[,3] )
ve = Xsmall %*% Beta
ve = cbind( V = ve,
A = c( -1, -1, 1, 1 ),
B = c(-1, 1, -1, 1 ) )
ve = as.data.frame( ve )
x11(width=12);
layout( cbind( 1, 2 ) )
plot( c(0,1), c( 70, 130 ), type = 'n', xlab = 'Levels of factor A',
xaxt = 'n', ylab = 'DV' )
segments( c(0,0), ve$V[ ve$B == -1 ],
c(1,1), ve$V[ ve$B == 1 ], lty = c(1,2) )
plot( c(0,1), c( 70, 130 ), type = 'n', xlab = 'Levels of factor B',
xaxt = 'n', ylab = 'DV' )
segments( c(0,0), ve$V[ ve$A == -1 ],
c(1,1), ve$V[ ve$A == 1 ], lty = c(1,2) )
plotYes = T
if ( plotYes ) {
x11(width=12);
# Visual example of the effects
Xsmall = cbind( 1, c( -1, -1, 1, 1 ), c(-1, 1, -1, 1 ) )
Xsmall = cbind( Xsmall, Xsmall[,2] * Xsmall[,3] )
ve = Xsmall %*% Beta
ve = cbind( V = ve,
A = c( -1, -1, 1, 1 ),
B = c(-1, 1, -1, 1 ) )
ve = as.data.frame( ve )
layout( cbind( 1, 2 ) )
plot( c(0,1), c( 70, 130 ), type = 'n', xlab = 'Levels of factor A',
xaxt = 'n', ylab = 'DV' )
axis( 1, 0:1, c(-1,1) )
segments( c(0,0), ve$V[ ve$B == -1 ],
c(1,1), ve$V[ ve$B == 1 ], lty = c(1,2) )
legend( 'bottomright', c('B == -1', 'B == 1'), lty = 1:2, bty = 'n' )
plot( c(0,1), c( 70, 130 ), type = 'n', xlab = 'Levels of factor B',
xaxt = 'n', ylab = 'DV' )
axis( 1, 0:1, c(-1,1) )
segments( c(0,0), ve$V[ ve$A == -1 ],
c(1,1), ve$V[ ve$A == 1 ], lty = c(1,2) )
legend( 'bottomright', c('A == -1', 'A == 1'), lty = 1:2, bty = 'n' )
}
if ( plotYes ) {
x11(width=12);
# Visual example of the effects
Xsmall = cbind( 1, c( -1, -1, 1, 1 ), c(-1, 1, -1, 1 ) )
Xsmall = cbind( Xsmall, Xsmall[,2] * Xsmall[,3] )
ve = Xsmall %*% Beta
ve = cbind( V = ve,
A = c( -1, -1, 1, 1 ),
B = c(-1, 1, -1, 1 ) )
ve = as.data.frame( ve )
layout( cbind( 1, 2 ) )
plot( c(0,1), c( 70, 130 ), type = 'n', xlab = 'Levels of factor A',
xaxt = 'n', ylab = 'DV' )
axis( 1, 0:1, c(-1,1) )
segments( c(0,0), ve$V[ ve$B == -1 ],
c(1,1), ve$V[ ve$B == 1 ], lty = c(1,2) )
legend( 'bottomright', c('B == -1', 'B == 1'), lty = 1:2, bty = 'n' )
plot( c(0,1), c( 70, 130 ), type = 'n', xlab = 'Levels of factor B',
xaxt = 'n', ylab = 'DV' )
axis( 1, 0:1, c(-1,1) )
segments( c(0,0), ve$V[ ve$A == -1 ],
c(1,1), ve$V[ ve$A == 1 ], lty = c(1,2) )
legend( 'bottomright', c('A == -1', 'A == 1'), lty = 1:2, bty = 'n' )
mtext( paste( 'Beta = [', paste( Beta[1:2], ',', Beta[3] ), ']' ),
side = 3, outer = T, line = -2 )
}
paste( Beta[1:2], ',', Beta[3] )
paste( Beta[1:2], ',', Beta[3], collapse = '' )
paste( Beta, ',' )
paste( Beta, ', ', sep = '' )
paste( paste( Beta, ', ', sep = '' ), collapse = '' )
paste( Beta, collapse = ' ' )
if ( plotYes ) {
x11(width=12);
# Visual example of the effects
Xsmall = cbind( 1, c( -1, -1, 1, 1 ), c(-1, 1, -1, 1 ) )
Xsmall = cbind( Xsmall, Xsmall[,2] * Xsmall[,3] )
ve = Xsmall %*% Beta
ve = cbind( V = ve,
A = c( -1, -1, 1, 1 ),
B = c(-1, 1, -1, 1 ) )
ve = as.data.frame( ve )
layout( cbind( 1, 2 ) )
plot( c(0,1), c( 70, 130 ), type = 'n', xlab = 'Levels of factor A',
xaxt = 'n', ylab = 'DV' )
axis( 1, 0:1, c(-1,1) )
segments( c(0,0), ve$V[ ve$B == -1 ],
c(1,1), ve$V[ ve$B == 1 ], lty = c(1,2) )
legend( 'bottomright', c('B == -1', 'B == 1'), lty = 1:2, bty = 'n' )
plot( c(0,1), c( 70, 130 ), type = 'n', xlab = 'Levels of factor B',
xaxt = 'n', ylab = 'DV' )
axis( 1, 0:1, c(-1,1) )
segments( c(0,0), ve$V[ ve$A == -1 ],
c(1,1), ve$V[ ve$A == 1 ], lty = c(1,2) )
legend( 'bottomright', c('A == -1', 'A == 1'), lty = 1:2, bty = 'n' )
mtext( paste( 'Beta = [', paste( Beta, collapse = ' ' ), ']' ),
side = 3, outer = T, line = -2 )
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
logLik
# Define generating parameters
gp = c( 1.0, 0.0 )
SDT_rng = function( prm, type ) {
N = length( type )
w = -1*(1-type)
mu = w*prm[1]/2
kappa = prm[2]
# Probability of picking choice 1
theta = pnorm( kappa, mu, 1 );
y = rbinom( N, 1, theta )
return( cbind( y = y, type = type ) )
}
SDT_rng( gp, rep( c(0,1), each = 40 ) )
Y = SDT_rng( gp, rep( c(0,1), each = 40 ) )
res = optim( c(0,.1), SDT_lpdf, dat = Y,
control = list( fnscale = -1, maxit = 20000 ) )
source('~/.active-rstudio-document', echo=TRUE)
res
lba_1acc_cdf = function( t, b, A, ver ) {
out = 0.0;
if ( (b >= A) & (A >= 0) & (t > 0) ) {
p1 = G( b/t, ver ) * ( t*Z_t - b )/A;
p2 = G( (b-A)/t, ver ) * ( b - A - t * Z_t )/A;
out = p1 + p2;
}
return( out );
}
Z = function( t, b, A, v, vs, ver ) {
if ( ver == 1 ) {
w = gamma( v + 1 )/( vs*gamma( v ) )
num = pgamma( b/t, v + 1, scale = vs ) -
pgamma( (b - A)/t, v + 1, scale = vs );
denom = pgamma( b/t, v, scale = vs ) - pgamma( (b - A)/t, v, scale = vs )
}
}
Z( .5, 1.5, 1, 1, 1, 1 )
Z = function( t, b, A, v, vs, ver ) {
if ( ver == 1 ) {
w = gamma( v + 1 )/( vs*gamma( v ) )
num = pgamma( b/t, v + 1, scale = vs ) -
pgamma( (b - A)/t, v + 1, scale = vs );
denom = pgamma( b/t, v, scale = vs ) - pgamma( (b - A)/t, v, scale = vs )
out = w*num/denom;
}
return( out );
}
Z( .5, 1.5, 1, 1, 1, 1 )
G = function( x, v, vs, ver ) {
if ( ver == 1 ) {
out = pgamma( x, v, scale = vs );
}
return( out );
}
lba_1acc_cdf = function( t, b, A, v, vs, ver ) {
out = 0.0;
if ( (b >= A) & (A >= 0) & (t > 0) ) {
p1 = G( b/t, ver ) * ( t*Z(t,b,A,v,vs,ver) - b )/A;
p2 = G( (b-A)/t, ver ) * ( b - A - t * Z(t,b,A,v,vs,ver) )/A;
out = p1 + p2;
}
return( out );
}
lba_1acc_cdf( .5, 1.5, 1, 1, 1, 1 )
G = function( x, v, vs, ver ) {
if ( ver == 1 ) {
out = pgamma( x, v, scale = vs );
}
return( out );
}
Z = function( t, b, A, v, vs, ver ) {
if ( ver == 1 ) {
w = gamma( v + 1 )/( vs*gamma( v ) )
num = pgamma( b/t, v + 1, scale = vs ) -
pgamma( (b - A)/t, v + 1, scale = vs );
denom = pgamma( b/t, v, scale = vs ) - pgamma( (b - A)/t, v, scale = vs )
out = w*num/denom;
}
return( out );
}
lba_1acc_cdf = function( t, b, A, v, vs, ver ) {
out = 0.0;
if ( (b >= A) & (A >= 0) & (t > 0) ) {
p1 = G( b/t, v, vs, ver ) * ( t*Z(t,b,A,v,vs,ver) - b )/A;
p2 = G( (b-A)/t, v, vs, ver ) * ( b - A - t * Z(t,b,A,v,vs,ver) )/A;
out = p1 + p2;
}
return( out );
}
lba_1acc_cdf( .5, 1.5, 1, 1, 1, 1 )
?pgamma
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?png
setwd("~/Github_files/academia-ipsum/content/img")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1000/20
1000/50
1000/100
round( seq(1,n,20) )
round( seq(1,1000,50) )
round( seq(1,1000,20) )
round( seq(1,1000,100) )
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
