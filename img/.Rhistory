source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Y_upper = sqrt( R^2 - Xc^2 )
Y_upper
source('~/.active-rstudio-document', echo=TRUE)
keep
source('~/.active-rstudio-document', echo=TRUE)
Y[1:10]
keep[1:10]
sel = Y < keep & Y > -keep
length(sel)
sel[1:10]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages(mvtnorm)
install.packages('mvtnorm')
library(mvtnorm)
?mvrnorm
?rmvnorm
# Load in package for multivariate normal
# install.packages('mvtnorm')
library(mvtnorm)
###
### Simulation example for single subject
###
# Number of trials
Nt = 40
# Generating parameters
gp = c( k1 = 0, k2 = 0, rho = .5, sig1 = 1, sig2 = 2 )
# gp[1:2] = Criterion values for choice 1 and 2
# gp[3] = Correlation for bivariate normal
# gp[4:5] = Variances
# Create correlation matrix
Omega = diag(2); Omega[1,2] = Omega[2,1] = gp[3]
# Create diagonal matrix of variances
tau = diag(gp[4:5])
# Create covariance matrix
Sigma = tau %*% Omega %*% tau
# Fix mean vector to 0
Mu = c(0,0)
# Simulate values from bivariate normal
z = rmvnorm(Nt,Mu,Sigma)
# Determine bivariate dichotomous responses
y = apply( z, 1, function(x) as.numeric( x > gp[1:2] ) )
freq = rowSums(y)
z_ex = rmvnorm( 10000, Mu, Sigma )
x11()
hist( z_ex )
hist( z_ex, freq = F, col = 'grey', border = 'white' )
hist( z_ex, freq = F, col = 'grey', border = 'white', breaks = 40 )
Sigma
det(Sigma)
det( Sigma[1,1]
)
det( matrix( Sigma[1,1], 1, 1 ) )
det( matrix( Sigma[2,2], 1, 1 ) )
mdmvn = function(x,Mu,Sigma,pos = 1) {
p1 = sqrt( Sigma[pos,pos] )*(2*pi)^(1/2)
p2 = (-.5/Sigma[pos,pos])*(x[pos] - Mu[pos])^2
return( exp(p2)/p1 )
}
x = seq( -5, 5, length = 1000 )
x = cbind( x, x )
d = numeric(1000)
for (i in 1:1000) d[i] = mdmvn(x[i,],Mu,Sigma)
lines(x,d,col='red')
x = seq( -5, 5, length = 1000 )
x = cbind( x, x )
d = numeric(1000)
for (i in 1:1000) d[i] = mdmvn(x[i,],Mu,Sigma)
lines(x[,1],d,col='red')
lines(x[,1],dnorm(x[,1],Mu[1],sqrt(Sigma[1,1])),col='red')
lines(x[,1],dnorm(x[,1],Mu[1],Sigma[1,1]),col='red')
lines(x[,1],dnorm(x[,1],Mu[1],Sigma[1,1]),col='blue')
lines(x[,1],dnorm(x[,1],Mu[1],sqrt( Sigma[1,1]) ),col='blue')
z_ex = rmvnorm( 10000, Mu, Sigma )
hist( z_ex[,1], freq = F, col = 'grey', border = 'white', breaks = 40 )
lines(x[,1],dnorm(x[,1],Mu[1],sqrt( Sigma[1,1]) ),col='blue')
dmvnorm
table( y )
sum( y[,1] == 0 & y[,2] == 0 )
sum( y[,1] == 0 & y[,2] == 0 )
y = t( apply( z, 1, function(x) as.numeric( x > gp[1:2] ) ) )
sum( y[,1] == 0 & y[,2] == 0 )
freq = c(
sum( y[,1] == 0 & y[,2] == 0 ),
sum( y[,1] == 0 & y[,2] == 1 ),
sum( y[,1] == 1 & y[,2] == 0 ),
sum( y[,1] == 1 & y[,2] == 1 )
)
freq
names(freq) = c('0|0','0|1','1|0','1|1')
freq
sum(freq)
Nt
freq
freq[c(2,4)]
sum( freq[c(2,4)] )
sum( freq[3,4] )
sum( freq[c(3,4)] )
# Number of trials
Nt = 40
# Generating parameters
gp = c( mu1 = 0, mu2 = 1, rho = .5 )
# gp[1:2] = Criterion values for choice 1 and 2
# gp[3] = Correlation for bivariate normal
# gp[4:5] = Variances
# Create correlation matrix
Omega = diag(2); Omega[1,2] = Omega[2,1] = gp[3]
# Define mean vector
Mu = gp[1:2]
# Simulate values from bivariate normal
z = rmvnorm(Nt,Mu,Sigma)
# Determine bivariate dichotomous responses
y = t( apply( z, 1, function(x) as.numeric( x > 0 ) ) )
y
freq = c(
sum( y[,1] == 0 & y[,2] == 0 ),
sum( y[,1] == 0 & y[,2] == 1 ),
sum( y[,1] == 1 & y[,2] == 0 ),
sum( y[,1] == 1 & y[,2] == 1 )
)
names(freq) = c('0|0','0|1','1|0','1|1')
freq
install.packages('rstan')
?curve
tst = function(x) dbeta(x,.5,.5);
x11()
curve(tst,0,1)
tst = function(x) dbeta(x,.1,.1);
curve(tst,0,1)
tst = function(x) dbeta(x,.05,.05);
curve(tst,0,1)
ex = matrix( rbeta(100*100,1,10), 100, 100 )
ex = matrix( rbeta(100*100,1,10), 100, 100 )
x11()
plot( 1:100, 1:100, pch = 15, col = rgb( ex, ex, ex, 1 ) )
ex = matrix( rbeta(100*100,1,10), 100, 100 )
x11()
x = rep( 1:100, 100 ); y = rep( 1:100, each = 100 )
plot( x, y, pch = 15, col = rgb( ex, ex, ex, 1 ) )
ex = matrix( rbeta(100*100,1,1), 100, 100 )
x11()
x = rep( 1:100, 100 ); y = rep( 1:100, each = 100 )
plot( x, y, pch = 15, col = rgb( ex, ex, ex, 1 ) )
ex = matrix( rbeta(100*100,sin(1:100),sin(1:100)), 100, 100 )
x11()
x = rep( 1:100, 100 ); y = rep( 1:100, each = 100 )
plot( x, y, pch = 15, col = rgb( ex, ex, ex, 1 ) )
sin(2
)
sin(100)
ex = matrix( rbeta(100*100,abs(sin(1:100)),abs(sin(1:100))), 100, 100 )
x11()
x = rep( 1:100, 100 ); y = rep( 1:100, each = 100 )
plot( x, y, pch = 15, col = rgb( ex, ex, ex, 1 ) )
ex = matrix( rbinom(100*100,1,abs(sin(1:100))), 100, 100 )
x11()
x = rep( 1:100, 100 ); y = rep( 1:100, each = 100 )
plot( x, y, pch = 15, col = rgb( ex, ex, ex, 1 ) )
imSize = 100
intensity = runif( imSize^2, 0, 1 )
ex = matrix(
x11()
x = rep( 1:imSize, imSize ); y = rep( 1:imSize, each = imSize )
plot( x, y, pch = 15, col = rgb( ex, ex, ex, 1 ) )
imSize = 100
intensity = runif( imSize^2, 0, 1 )
ex = matrix( intensity, imSize, imSize )
x11()
x = rep( 1:imSize, imSize ); y = rep( 1:imSize, each = imSize )
plot( x, y, pch = 15, col = rgb( ex, ex, ex, 1 ) )
curve( exp, 0, 1 )
imSize = 100
pos = sample( 1:imSize, imSize^2, replace = T )
pos
pos[1]
imSize = 100
pos_x = sample( 1:imSize, imSize^2, replace = T )
pos_y = sample( 1:imSize, imSize^2, replace = T )
x = rep( 1:imSize, imSize ); y = rep( 1:imSize, each = imSize )
pos_x[1]; pos_y[1]
library(MASS)
imSize = 100
pos_x = sample( 1:imSize, imSize^2, replace = T )
pos_y = sample( 1:imSize, imSize^2, replace = T )
x = rep( 1:imSize, imSize ); y = rep( 1:imSize, each = imSize )
mu = c(pos_x[1], pos_y[1])
sigma = diag(2)*10;
dmvnorm
library(mvtnorm)
imSize = 100
pos_x = sample( 1:imSize, imSize^2, replace = T )
pos_y = sample( 1:imSize, imSize^2, replace = T )
x = rep( 1:imSize, imSize ); y = rep( 1:imSize, each = imSize )
mu = c(pos_x[1], pos_y[1])
sigma = diag(2)*10;
dmvnorm
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
78 - 74
x11()
# layout( cbind(1,2) )
# Set the mean and standard deviation for the demonstration
prm = c( 0.25, 0.75 )
# Truncating a normal distribution redistributes the probability
# mass:
orig_x = seq( -4, 4, length = 1000 )
trunc_x = seq( -1, 1, length = 1000 )
d = dnorm( orig_x, prm[1], prm[2] )
denom = pnorm( 1, prm[1], prm[2] ) - pnorm( -1, prm[1], prm[2] )
dt = dnorm( trunc_x, prm[1], prm[2] )/denom
plot( c(-4,4), c(0,max(d,dt)), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density' )
lines( orig_x, d )
lines( trunc_x, dt, col = 'red' )
abline(v=c(-1,1),lty=2)
x11()
# layout( cbind(1,2) )
# Set the mean and standard deviation for the demonstration
prm = c( 0.25, 0.75 )
# Truncating a normal distribution redistributes the probability
# mass:
orig_x = seq( -4, 4, length = 1000 )
trunc_x = seq( -1, 1, length = 1000 )
d = dnorm( orig_x, prm[1], prm[2] )
denom = pnorm( 1, prm[1], prm[2] ) - pnorm( -1, prm[1], prm[2] )
dt = dnorm( trunc_x, prm[1], prm[2] )/denom
plot( c(-4,4), c(0,max(d,dt)), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density', cex = 1.5 )
lines( orig_x, d )
lines( trunc_x, dt, col = 'red' )
abline(v=c(-1,1),lty=2)
x11()
# layout( cbind(1,2) )
# Set the mean and standard deviation for the demonstration
prm = c( 0.25, 0.75 )
# Truncating a normal distribution redistributes the probability
# mass:
orig_x = seq( -4, 4, length = 1000 )
trunc_x = seq( -1, 1, length = 1000 )
d = dnorm( orig_x, prm[1], prm[2] )
denom = pnorm( 1, prm[1], prm[2] ) - pnorm( -1, prm[1], prm[2] )
dt = dnorm( trunc_x, prm[1], prm[2] )/denom
plot( c(-4,4), c(0,max(d,dt)), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density', cex = 2 )
lines( orig_x, d )
lines( trunc_x, dt, col = 'red' )
abline(v=c(-1,1),lty=2)
x11()
# layout( cbind(1,2) )
# Set the mean and standard deviation for the demonstration
prm = c( 0.25, 0.75 )
# Truncating a normal distribution redistributes the probability
# mass:
orig_x = seq( -4, 4, length = 1000 )
trunc_x = seq( -1, 1, length = 1000 )
d = dnorm( orig_x, prm[1], prm[2] )
denom = pnorm( 1, prm[1], prm[2] ) - pnorm( -1, prm[1], prm[2] )
dt = dnorm( trunc_x, prm[1], prm[2] )/denom
plot( c(-4,4), c(0,max(d,dt)), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density', cex.axis = 2 )
lines( orig_x, d )
lines( trunc_x, dt, col = 'red' )
abline(v=c(-1,1),lty=2)
x11()
# layout( cbind(1,2) )
# Set the mean and standard deviation for the demonstration
prm = c( 0.25, 0.75 )
# Truncating a normal distribution redistributes the probability
# mass:
orig_x = seq( -4, 4, length = 1000 )
trunc_x = seq( -1, 1, length = 1000 )
d = dnorm( orig_x, prm[1], prm[2] )
denom = pnorm( 1, prm[1], prm[2] ) - pnorm( -1, prm[1], prm[2] )
dt = dnorm( trunc_x, prm[1], prm[2] )/denom
plot( c(-4,4), c(0,max(d,dt)), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density', cex.axis = 1.5 )
lines( orig_x, d )
lines( trunc_x, dt, col = 'red' )
abline(v=c(-1,1),lty=2)
x11()
# layout( cbind(1,2) )
# Set the mean and standard deviation for the demonstration
prm = c( 0.25, 0.75 )
# Truncating a normal distribution redistributes the probability
# mass:
orig_x = seq( -4, 4, length = 1000 )
trunc_x = seq( -1, 1, length = 1000 )
d = dnorm( orig_x, prm[1], prm[2] )
denom = pnorm( 1, prm[1], prm[2] ) - pnorm( -1, prm[1], prm[2] )
dt = dnorm( trunc_x, prm[1], prm[2] )/denom
plot( c(-4,4), c(0,max(d,dt)), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density', cex.axis = 1.5,
cex.lab = 1.5 )
lines( orig_x, d )
lines( trunc_x, dt, col = 'red' )
abline(v=c(-1,1),lty=2)
x11()
# layout( cbind(1,2) )
# Set the mean and standard deviation for the demonstration
prm = c( 0.25, 0.75 )
# Truncating a normal distribution redistributes the probability
# mass:
orig_x = seq( -4, 4, length = 1000 )
trunc_x = seq( -1, 1, length = 1000 )
d = dnorm( orig_x, prm[1], prm[2] )
denom = pnorm( 1, prm[1], prm[2] ) - pnorm( -1, prm[1], prm[2] )
dt = dnorm( trunc_x, prm[1], prm[2] )/denom
plot( c(-4,4), c(0,max(d,dt)), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density', cex.axis = 1.5,
cex.lab = 1.5 )
lines( orig_x, d, lwd = 2 )
lines( trunc_x, dt, col = 'red', lwd = 2 )
abline( v = c(-1,1), lty = 2, lwd = 2 )
setwd("~/Github_files/academia-ipsum/content/img")
png( file = 'Truncated_normal_dist.png', width = 480, height = 480 )
# Set the mean and standard deviation for the demonstration
prm = c( 0.25, 0.75 )
# Truncating a normal distribution redistributes the probability
# mass:
orig_x = seq( -4, 4, length = 1000 )
trunc_x = seq( -1, 1, length = 1000 )
d = dnorm( orig_x, prm[1], prm[2] )
denom = pnorm( 1, prm[1], prm[2] ) - pnorm( -1, prm[1], prm[2] )
dt = dnorm( trunc_x, prm[1], prm[2] )/denom
plot( c(-4,4), c(0,max(d,dt)), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density', cex.axis = 1.5,
cex.lab = 1.5 )
lines( orig_x, d, lwd = 2 )
lines( trunc_x, dt, col = 'red', lwd = 2 )
abline( v = c(-1,1), lty = 2, lwd = 2 )
dev.off()
# Therefore, as a sanity check:
N = 10000 # Number of samples for Monte Carlo integration
orig = rnorm(N,prm[1],prm[2])
trunc = rnorm(N,prm[1],prm[2])
# Resample until all draws lie within the truncation
while( sum( trunc > 1 | trunc < -1 ) > 0 ) {
sel = trunc > 1 | trunc < -1
trunc[sel] = rnorm( sum(sel),prm[1],prm[2] )
}
# Therefore, as a sanity check:
N = 10000 # Number of samples for Monte Carlo integration
orig = rnorm(N,prm[1],prm[2])
trunc = rnorm(N,prm[1],prm[2])
# Resample until all draws lie within the truncation
while( sum( trunc > 1 | trunc < -1 ) > 0 ) {
sel = trunc > 1 | trunc < -1
trunc[sel] = rnorm( sum(sel),prm[1],prm[2] )
}
# Histograms of the normal and truncated normal draws
e1 = hist( orig,  breaks = 40, plot = F )
e2 = hist( trunc, breaks = 40, plot = F )
x11()
# Determine the height of the plot
yl = lowerUpper(.25,c(e1$density,e2$density))
plot( c(-4,4), c(0,yl[2]), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density' )
library(utilityf)
# Determine the height of the plot
yl = lowerUpper(.25,c(e1$density,e2$density))
plot( c(-4,4), c(0,yl[2]), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density' )
# Untruncated
polygon( c( min(e1$mids), e1$mids, max(e1$mids) ),
c( 0, e1$density, 0 ),
border = NA, col = rgb( 0, 0, 1, .5 ) )
# Truncated
polygon( c( min(e2$mids), e2$mids, max(e2$mids) ),
c( 0, e2$density, 0 ),
border = NA, col = rgb( 1, 0, 0, .5 ) )
# True densities
lines( orig_x, d, lwd = 2 )
lines( trunc_x, dt, col = 'red', lwd = 2 )
# Determine the height of the plot
yl = lowerUpper(.25,c(e1$density,e2$density))
plot( c(-4,4), c(0,yl[2]), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density', cex.axis = 1.5,
cex.lab = 1.5 )
# Untruncated
polygon( c( min(e1$mids), e1$mids, max(e1$mids) ),
c( 0, e1$density, 0 ),
border = NA, col = rgb( 0, 0, 1, .5 ) )
# Truncated
polygon( c( min(e2$mids), e2$mids, max(e2$mids) ),
c( 0, e2$density, 0 ),
border = NA, col = rgb( 1, 0, 0, .5 ) )
# True densities
lines( orig_x, d, lwd = 2 )
lines( trunc_x, dt, col = 'red', lwd = 2 )
legend( 'topleft', c('Untruncated','Truncated'),
fill = c( rgb(0,0,1,.5), rgb(1,0,0,.5) ),
bty = 'n', cex = 1.5 )
legend( 'topright', c('N = 10,000'), bty = 'n', cex = 1.5 )
png( file = 'Resampling_truncated_normal.png', width = 480, height = 480 )
# Therefore, as a sanity check:
N = 10000 # Number of samples for Monte Carlo integration
orig = rnorm(N,prm[1],prm[2])
trunc = rnorm(N,prm[1],prm[2])
# Resample until all draws lie within the truncation
while( sum( trunc > 1 | trunc < -1 ) > 0 ) {
sel = trunc > 1 | trunc < -1
trunc[sel] = rnorm( sum(sel),prm[1],prm[2] )
}
# Histograms of the normal and truncated normal draws
e1 = hist( orig,  breaks = 40, plot = F )
e2 = hist( trunc, breaks = 40, plot = F )
x11()
# Determine the height of the plot
yl = lowerUpper(.25,c(e1$density,e2$density))
plot( c(-4,4), c(0,yl[2]), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density', cex.axis = 1.5,
cex.lab = 1.5 )
# Untruncated
polygon( c( min(e1$mids), e1$mids, max(e1$mids) ),
c( 0, e1$density, 0 ),
border = NA, col = rgb( 0, 0, 1, .5 ) )
# Truncated
polygon( c( min(e2$mids), e2$mids, max(e2$mids) ),
c( 0, e2$density, 0 ),
border = NA, col = rgb( 1, 0, 0, .5 ) )
# True densities
lines( orig_x, d, lwd = 2 )
lines( trunc_x, dt, col = 'red', lwd = 2 )
# Legend
legend( 'topleft', c('Not truncated','Truncated'),
fill = c( rgb(0,0,1,.5), rgb(1,0,0,.5) ),
bty = 'n', cex = 1.5 )
legend( 'topright', c('N = 10,000'), bty = 'n', cex = 1.5 )
dev.off()
png( file = 'Resampling_truncated_normal.png', width = 480, height = 480 )
# Therefore, as a sanity check:
N = 10000 # Number of samples for Monte Carlo integration
orig = rnorm(N,prm[1],prm[2])
trunc = rnorm(N,prm[1],prm[2])
# Resample until all draws lie within the truncation
while( sum( trunc > 1 | trunc < -1 ) > 0 ) {
sel = trunc > 1 | trunc < -1
trunc[sel] = rnorm( sum(sel),prm[1],prm[2] )
}
# Histograms of the normal and truncated normal draws
e1 = hist( orig,  breaks = 40, plot = F )
e2 = hist( trunc, breaks = 40, plot = F )
# x11()
# Determine the height of the plot
yl = lowerUpper(.25,c(e1$density,e2$density))
plot( c(-4,4), c(0,yl[2]), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density', cex.axis = 1.5,
cex.lab = 1.5 )
# Untruncated
polygon( c( min(e1$mids), e1$mids, max(e1$mids) ),
c( 0, e1$density, 0 ),
border = NA, col = rgb( 0, 0, 1, .5 ) )
# Truncated
polygon( c( min(e2$mids), e2$mids, max(e2$mids) ),
c( 0, e2$density, 0 ),
border = NA, col = rgb( 1, 0, 0, .5 ) )
# True densities
lines( orig_x, d, lwd = 2 )
lines( trunc_x, dt, col = 'red', lwd = 2 )
# Legend
legend( 'topleft', c('Not truncated','Truncated'),
fill = c( rgb(0,0,1,.5), rgb(1,0,0,.5) ),
bty = 'n', cex = 1.5 )
legend( 'topright', c('N = 10,000'), bty = 'n', cex = 1.5 )
dev.off()
dev.off()
dev.off()
png( file = 'Resampling_truncated_normal.png', width = 480, height = 480 )
# Therefore, as a sanity check:
N = 10000 # Number of samples for Monte Carlo integration
orig = rnorm(N,prm[1],prm[2])
trunc = rnorm(N,prm[1],prm[2])
# Resample until all draws lie within the truncation
while( sum( trunc > 1 | trunc < -1 ) > 0 ) {
sel = trunc > 1 | trunc < -1
trunc[sel] = rnorm( sum(sel),prm[1],prm[2] )
}
# Histograms of the normal and truncated normal draws
e1 = hist( orig,  breaks = 40, plot = F )
e2 = hist( trunc, breaks = 40, plot = F )
# x11()
# Determine the height of the plot
yl = lowerUpper(.25,c(e1$density,e2$density))
plot( c(-4,4), c(0,yl[2]), type = 'n', bty = 'l',
xlab = 'z-scores', ylab = 'Density', cex.axis = 1.5,
cex.lab = 1.5 )
# Untruncated
polygon( c( min(e1$mids), e1$mids, max(e1$mids) ),
c( 0, e1$density, 0 ),
border = NA, col = rgb( 0, 0, 1, .5 ) )
# Truncated
polygon( c( min(e2$mids), e2$mids, max(e2$mids) ),
c( 0, e2$density, 0 ),
border = NA, col = rgb( 1, 0, 0, .5 ) )
# True densities
lines( orig_x, d, lwd = 2 )
lines( trunc_x, dt, col = 'red', lwd = 2 )
# Legend
legend( 'topleft', c('Not truncated','Truncated'),
fill = c( rgb(0,0,1,.5), rgb(1,0,0,.5) ),
bty = 'n', cex = 1.5 )
legend( 'topright', c('N = 10,000'), bty = 'n', cex = 1.5 )
dev.off()
